name: Continuous deployment

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [opened, reopened, synchronize, closed]

env:
  APP: blog

jobs:

  get-image-tag:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.imageTag.outputs.tag }}

    steps:
      - name: Get image tag
        id: imageTag
        run: |
          if [ "${{ github.event_name }}" != 'push' ]; then
            echo "::set-output name=tag::${{ github.event.pull_request.head.sha }}"
          else
            echo "::set-output name=tag::${{ github.sha }}"
          fi

  build-image:
    runs-on: ubuntu-latest
    needs: get-image-tag

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.get-image-tag.outputs.tag }}

      - name: Read .ruby-version
        id: ruby_version
        run: echo "##[set-output name=RUBY_VERSION;]$(cat .ruby-version)"

      - name: Cache gems
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-gems-image-${{ steps.ruby_version.outputs.RUBY_VERSION }}
          restore-keys: ${{ runner.os }}-gems-image-

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.APP }}

      - name: Setup Docker Buildx
        run: docker buildx create --driver docker-container --use

      - name: Build image for release
        run: make build-with-cache

      - name: Tag image
        run: |
          docker tag ${{ env.APP }} ${{ env.APP }}:${{ needs.get-image-tag.outputs.tag }}

          if [ "${{ github.event_name }}" == "push" ]; then
            docker tag ${{ env.APP }} ${{ env.APP }}:staging-${{ needs.get-image-tag.outputs.tag }}
          else
            docker tag ${{ env.APP }} ${{ env.APP }}:pr-$(basename ${{ github.event.pull_request._links.html.href }})
          fi
          # This is where we would push the image

